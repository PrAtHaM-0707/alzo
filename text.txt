const mongoose = require("mongoose");

const AppointmentSchema = new mongoose.Schema({
  patientId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  doctorId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  date: { type: Date, required: true },
  time: { type: String, required: true },
  reason: { type: String, required: true },
  status: {
    type: String,
    enum: ["pending", "approved", "rejected"],
    default: "pending",
  },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model("Appointment", AppointmentSchema);


--------------------------------

const mongoose = require('mongoose');

const caregiverPatientSchema = new mongoose.Schema({
  caregiverId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  patientId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});


caregiverPatientSchema.index({ caregiverId: 1, patientId: 1 }, { unique: true });

module.exports = mongoose.model('CaregiverPatient', caregiverPatientSchema);


----------------------------------------


const mongoose = require('mongoose');

const MedicationSchema = new mongoose.Schema({
    patientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    doctorId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    name: { type: String, required: true },
    time: { type: String, required: true },
    date: { type: Date, default: Date.now }, 
    taken: { type: Boolean, default: false }
});

module.exports = mongoose.model('Medication', MedicationSchema);

------------------------------------------

const mongoose = require('mongoose');

const sosAlertSchema = new mongoose.Schema({
  patientId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  doctorId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    default: null
  },
  caregiverId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    default: null
  },
  status: {
    type: String,
    enum: ['active', 'resolved'],
    default: 'active'
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('SosAlert', sosAlertSchema);


------------------------------


const { Schema, model } = require('mongoose');
const { nanoid } = require('nanoid');

const userSchema = new Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['patient', 'caregiver', 'doctor'] },
    patientId: { type: String, sparse: true },
    specialty: { type: String },
    condition: { 
        type: String, 
        enum: ['Stable', 'Critical', 'Recovering', 'Under Observation'], 
        default: 'Stable' 
    }
}, { timestamps: true }); 

userSchema.pre('save', async function (next) {
    if (this.isNew && this.role === 'patient' && !this.patientId) {
        this.patientId = nanoid();
    }
    next();
});

module.exports = model('User', userSchema);


--------------------------------


const mongoose = require('mongoose');

const videoSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Title is required'],
    trim: true
  },
  url: {
    type: String,
    required: [true, 'Video URL is required'],
    trim: true
  },
  description: {
    type: String,
    trim: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('Video', videoSchema);


------------------------------------


const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const path = require('path');
const authRoutes = require('./routes/auth');

dotenv.config();

const app = express();

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '..')));

mongoose.connect(process.env.MONGO_URI)
.then(() => console.log('MongoDB connected'))
.catch((err) => console.error('MongoDB connection error:', err));

app.use('/api/auth', authRoutes);

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'land1.html'));
});
app.get('/signup', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'signup.html'));
});
app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'login.html'));
});
app.get('/role', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'role.html'));
});
app.get('/patient/pat.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'patient', 'pat.html'));
});
app.get('/patient/settings.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'patient', 'settings.html'));
});
app.get('/doctor/doc.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'doctor', 'doc.html'));
});
app.get('/caregiver/care.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'caregiver', 'care.html'));
});
app.get('/caregiver/profile.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'caregiver', 'profile.html'));
});
app.get('/caregiver/patients.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'caregiver', 'patients.html'));
});
app.get('/caregiver/patient.html', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'caregiver', 'patient.html'));
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


this is server.js 